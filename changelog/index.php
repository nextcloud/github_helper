<?php

// This file is generated by Composer
require_once __DIR__ . '/vendor/autoload.php';

use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
# TODO
#use Cache\Adapter\Redis\RedisCachePool;

class GenerateChangelogCommand extends Command
{
	protected function configure()
	{
		$this
			->setName('generate:changelog')
			->setDescription('Generates the changelog.')
			->addArgument('base', InputArgument::REQUIRED, 'The base version.')
			->addArgument('head', InputArgument::REQUIRED, 'The head version.')
			->addOption(
				'format',
				'f',
				InputOption::VALUE_REQUIRED,
				'What format should the output have? (markdown, forum, html)',
				'markdown'
			);
		;
	}

	/**
	 * @throws Exception
	 */
	protected function execute(InputInterface $input, OutputInterface $output)
	{
		// TODO iterate over all repos
		$orgName = 'nextcloud';
		$repoName = 'server';


		if (!file_exists(__DIR__ . '/../credentials.json')) {
			throw new Exception('Credentials file is missing - please provide your credentials in credentials.json in the root folder.');
		}

		$credentialsData = json_decode(file_get_contents(__DIR__ . '/../credentials.json'), true);
		if (!is_array($credentialsData) || !isset($credentialsData['apikey'])) {
			throw new Exception('Credentials file can not be read or does not provide "apikey".');
		}

		$format = $input->getOption('format');
		if (!in_array($format, ['markdown', 'forum', 'html'])) {
			throw new \Symfony\Component\Console\Exception\InvalidOptionException(
				"The provided format is invalid (should be one of markdown, forum, html but was '$format')"
			);
		}
		$base = $input->getArgument('base');
		$head = $input->getArgument('head');

		$output->writeln("base: $base");
		$output->writeln("head: $head");

		$pullRequests = [];

		# TODO
		#$client = new \Redis();
		#$client->connect('127.0.0.1', 6379);
		// Create a PSR6 cache pool
		#$pool = new RedisCachePool($client);

		$client = new \Github\Client();
		# TODO
		#$client->addCache($pool);
		$client->authenticate($credentialsData['apikey'], Github\Client::AUTH_URL_TOKEN);

		/** @var \Github\Api\Repo $repo */
		$repo = $client->api('repo');
		try {
			$output->writeln('Fetching git history ...');
			$diff = $repo->commits()->compare($orgName, $repoName, $base, $head);
		} catch(\Github\Exception\RuntimeException $e) {
			if ($e->getMessage() === 'Not Found') {
				$output->writeln('<error>Could not find base or head reference.</error>');
				return;
			}
			throw $e;
		}

		foreach($diff['commits'] as $commit) {
			$fullMessage = $commit['commit']['message'];
			list($firstLine, ) = explode("\n", $fullMessage, 2);
			if (substr($firstLine, 0, 20) === 'Merge pull request #') {
				$firstLine = substr($firstLine, 20);
				list($number, ) = explode(" ", $firstLine, 2);
				$pullRequests[] = $number;
			}
		}

		if (substr($base, 0, 1) === 'v') {
			$version = explode('.', substr($base, 1));
			if (count($version) !== 3) {
				$output->writeln('<error>Detected version does not have exactly 3 numbers separated by a dot.</error>');
			} else {
				$version[2] = (string)((int)$version[2] + 1);

				$milestoneToCheck = join('.', $version);
				$output->writeln("Fetching pending PRs for $milestoneToCheck ...");

				$query = "query{
  repository(owner: \"$orgName\", name: \"$repoName\") {
	milestones(first: 20, states: [OPEN]) {
      nodes {
        title
        pullRequests(states: [OPEN], first: 20) {
          nodes {
            number
          }
        }
      }
    }
  }
}";

				$response = $client->api('graphql')->execute($query);
				foreach ($response['data']['repository']['milestones']['nodes'] as $milestone) {
					if (strpos($milestone['title'], $milestoneToCheck) !== false) {
						foreach ($milestone['pullRequests']['nodes'] as $pr) {
							$pullRequests[] = $pr['number'];
						}
					}
				}
			}
		} else {
			$output->writeln('<error>No version detected - the output will not contain any pending PRs. Use a git tag starting with "v" like "v13.0.5".</error>');
		}


		$query = <<<'QUERY'
query {
QUERY;
		$query .= '    repository(owner: "' . $orgName . '", name: "' . $repoName . '") {';

		foreach($pullRequests as $pullRequest) {
			$query .= "pr$pullRequest: pullRequest(number: $pullRequest) { number, title, state },";
		}

		$query .= <<<'QUERY'
    }
}
QUERY;

		$output->writeln('Fetching PR titles ...');
		$response = $client->api('graphql')->execute($query);

		$prTitles = ['closed' => [], 'pending' => []];

		foreach($response['data']['repository'] as $pr) {
			$title = $pr['title'];
			$title = preg_replace('!(\[|\()(stable)? ?(10|11|12|13)(\]|\))?!i', '', $title);
			$title = trim($title);
			$title = strtoupper(substr($title, 0, 1)) . substr($title, 1);
			if ($pr['state'] === 'MERGED') {
				$prTitles['closed'][$pr['number']] = $title;
			} else {
				$prTitles['pending'][$pr['number']] = $title;
			}
		}

		ksort($prTitles['closed']);
		ksort($prTitles['pending']);

		switch($format) {
			case 'html':
				foreach($prTitles['closed'] as $number => $title) {
					$output->writeln("<li><a href='https://github.com/$orgName/$repoName/pulls/$number'>$title (server#$number)</a></li>");
				}
				$count = count($prTitles['pending']);
				if ($count > 0) {
					$output->writeln("<error>$count pending PRs not printed - maybe the release is not ready yet</error>");
				}
				break;
			case 'forum':
				foreach($prTitles['closed'] as $number => $title) {
					$output->writeln("* [$title (server#$number)](https://github.com/$orgName/$repoName/pulls/$number)");
				}
				$count = count($prTitles['pending']);
				if ($count > 0) {
					$output->writeln("<error>$count pending PRs not printed - maybe the release is not ready yet</error>");
				}
				break;
			case 'markdown':
			default:
				foreach($prTitles['closed'] as $number => $title) {
					$output->writeln("* #$number $title");
				}
				if (count($prTitles['pending'])) {
					$output->writeln("\n\nPending PRs:\n");
				}
				foreach($prTitles['pending'] as $number => $title) {
					$output->writeln("* [ ] #$number $title");
				}
				break;
		}

		// Stop using cache
		# TODO
		#$client->removeCache();
	}
}

$application = new Application();

$application->add(new GenerateChangelogCommand());
$application->run();
